{
  "openapi": "3.1.0",
  "info": {
    "title": "AI API",
    "description": "Optimized for high-speed inference and scalability by Gloo AI\n\n[Swagger UI](./docs) | [ReDoc UI](./redoc)",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://platform.ai.gloo.com"
    }
  ],
  "paths": {
    "/ai/{v}/chats": {
      "get": {
        "tags": ["chat"],
        "summary": "List chats",
        "operationId": "list",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object"
                  },
                  "title": "Response List"
                },
                "example": [
                  {
                    "chat_id": "c108e5708-3a35-4104-8ac0-abd0fc18c008",
                    "user_id": "u8721bb6d-b1c3-4130-b413-e7a56b3403d9",
                    "created_at": "2025-07-14T18:38:26.126361",
                    "updated_at": "2025-07-14T18:38:26.126361",
                    "title": "Chat Title",
                    "summary": "Chat Summary",
                    "task": null,
                    "pin": false
                  }
                ]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find user"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/ai/{v}/chat": {
      "get": {
        "tags": ["chat"],
        "summary": "Get chat",
        "operationId": "get",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "chat_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get"
                },
                "example": {
                  "user_id": "u8721bb6d-b1c3-4130-b413-e7a56b3403d9",
                  "chat_id": "c518c540a-28f1-4055-a8ed-44a5929c63f8",
                  "created_at": "2025-07-14T19:04:56.974882",
                  "updated_at": "2025-07-14T19:05:03.205307",
                  "messages": [
                    {
                      "query_id": "q912f58e9-135b-4f95-8853-d98f7b5294f6",
                      "message_id": "mfdca4b99-c672-4f76-8b48-dcf550be9500",
                      "timestamp": "2025-07-14T19:04:58.449394",
                      "role": "user",
                      "character_limit": 0,
                      "stream": false,
                      "intent": 0,
                      "message": "What is your name?",
                      "model": "us.anthropic.claude-3-7-sonnet-20250219-v1:0",
                      "publishers": []
                    },
                    {
                      "query_id": "q912f58e9-135b-4f95-8853-d98f7b5294f6",
                      "message_id": "mfc7bc417-c089-4806-8b61-51ba24b09898",
                      "timestamp": "2025-07-14T19:04:59.679262",
                      "role": "kallm",
                      "intent": 0,
                      "sources_limit": 0,
                      "sources": [],
                      "success": true,
                      "suggestions": [
                        "How can I use AI?",
                        "What can KALLM help me with?",
                        "Can I ask you for advice?"
                      ],
                      "message": "My name is Gloo AI Chat. How can I assist you today?",
                      "model": "us.anthropic.claude-3-7-sonnet-20250219-v1:0"
                    }
                  ],
                  "pin": false,
                  "summary": null,
                  "title": "User Asks About AI's Name"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find chat"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "post": {
        "tags": ["chat"],
        "summary": "Create chat",
        "operationId": "post",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "chat_id": "c2e49a430-1d00-4f07-bd83-123c5b51c3b5",
                  "created_at": "2025-02-05T00:12:52.322010",
                  "user_id": "u8721bb6d-b1c3-4130-b413-e7a56b3403d9"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to create chat"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "patch": {
        "tags": ["chat"],
        "summary": "Update chat",
        "operationId": "patch",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "chat_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat ID"
            }
          },
          {
            "name": "chat_field",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ChatFieldDropdown",
              "minLength": 0,
              "maxLength": 7,
              "title": "Field to Update",
              "description": "Select a field"
            },
            "description": "Select a field"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChatPatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {},
                "example": {
                  "chat_id": "cd7c70b84-81b4-4865-ba38-5bce98d1919d",
                  "field": "pin",
                  "value": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Invalid value"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": ["chat"],
        "summary": "Delete chat",
        "operationId": "delete",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "chat_id",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Chat Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete"
                },
                "example": {
                  "deleted": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find chat"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                },
                "example": {
                  "detail": [
                    {
                      "type": "missing",
                      "loc": ["query", "chat_id"],
                      "msg": "Field required",
                      "input": null
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ai/{v}/message": {
      "post": {
        "tags": ["chat"],
        "summary": "Post message",
        "operationId": "post-message",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "chat_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Chat Id"
            }
          },
          {
            "name": "intent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntentEnum"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Intent"
            }
          },
          {
            "name": "enable_sources",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnableSourcesEnum"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Enable Sources"
            }
          },
          {
            "name": "enable_suggestions",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnableSuggestionsEnum"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Enable Suggestions"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post-Message"
                },
                "example": {
                  "chat_id": "cb26ddd31-8cd8-4fb0-a258-6691aa43771c",
                  "query_id": "q167f294a-703f-4043-9d55-e929e35b2cf3",
                  "message_id": "m126384c0-def0-43ac-9d4e-c099ebf4c309",
                  "timestamp": "2025-07-14T18:29:42.060759",
                  "success": true,
                  "message": "My name is Gloo AI Chat.",
                  "model": "us.meta.llama3-3-70b-instruct-v1:0",
                  "sources": [],
                  "sources_limit": 0,
                  "suggestions": [
                    "How can I use AI?",
                    "What can KALLM help me with?",
                    "Can I ask you for advice?"
                  ],
                  "intent": 0
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find chat"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "put": {
        "tags": ["chat"],
        "summary": "Update message",
        "operationId": "put-message",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "task",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableTasks"
            }
          },
          {
            "name": "chat_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Chat Id"
            }
          },
          {
            "name": "message_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Message Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Put-Message"
                },
                "example": {
                  "task": "stop",
                  "success": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find chat"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      },
      "delete": {
        "tags": ["chat"],
        "summary": "Delete message",
        "operationId": "delete-message",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "message_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "",
              "default": "",
              "title": "Message Id"
            }
          },
          {
            "name": "query_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "description": "",
              "default": "",
              "title": "Query Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete-Message"
                },
                "example": {
                  "deleted": true,
                  "message_id": "m37e38f0b-0ef3-462d-bad7-4fd7e043b1c1"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find message"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/ai/{v}/message/kallm": {
      "post": {
        "tags": ["chat"],
        "summary": "Post message KaLLM",
        "operationId": "post-message-kallm",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          },
          {
            "name": "chat_id",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "default": "",
              "title": "Chat Id"
            }
          },
          {
            "name": "intent",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/IntentEnum"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Intent"
            }
          },
          {
            "name": "enable_sources",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnableSourcesEnum"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Enable Sources"
            }
          },
          {
            "name": "enable_suggestions",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/EnableSuggestionsEnum"
                },
                {
                  "type": "null"
                }
              ],
              "default": 1,
              "title": "Enable Suggestions"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostMessageRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post-Message-Kallm"
                },
                "example": {
                  "query_id": "q3c870f25-63fc-451f-a9ce-9a5abed55aa0",
                  "message_id": "mbc51c1d8-29e7-416f-85fc-9f4209d9887b",
                  "message": "My name is Gloo AI Chat, and I'm here to assist you!",
                  "timestamp": "2025-02-04T23:55:03.573767"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find chat"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/ai/{v}/user": {
      "delete": {
        "tags": ["chat"],
        "summary": "Delete user",
        "operationId": "delete-user",
        "parameters": [
          {
            "name": "v",
            "in": "path",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AvailableVersions"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Delete-User"
                },
                "example": {
                  "deleted": true
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Failed to find user"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/ai/v1/chat/completions": {
      "post": {
        "tags": ["studio"],
        "summary": "Post completions",
        "operationId": "post-completions",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StudioPostCompletionsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Non-streaming successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Post-Completions"
                },
                "example": {
                  "id": "chatcmpl-d7007d2f",
                  "choices": [
                    {
                      "finish_reason": "stop",
                      "index": 0,
                      "logprobs": null,
                      "message": {
                        "content": "Hello. It's nice to meet you. Is there something I can help you with or would you like to chat?",
                        "refusal": null,
                        "role": "assistant",
                        "annotations": null,
                        "audio": null,
                        "function_call": null,
                        "tool_calls": null
                      }
                    }
                  ],
                  "created": 1752600200,
                  "model": "us.meta.llama3-3-70b-instruct-v1:0",
                  "object": "chat.completion",
                  "service_tier": null,
                  "system_fingerprint": "fp",
                  "usage": {
                    "completion_tokens": 25,
                    "prompt_tokens": 1707,
                    "total_tokens": 1732,
                    "completion_tokens_details": null,
                    "prompt_tokens_details": null
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Model is required."
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/models": {
      "get": {
        "tags": ["studio"],
        "summary": "Get models",
        "operationId": "get-models",
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Get-Models"
                },
                "example": {
                  "object": "list",
                  "data": [
                    {
                      "id": "model-id-0",
                      "object": "model",
                      "created": 1686935002,
                      "owned_by": "organization-owner"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/ai/data/v1/search": {
      "post": {
        "tags": ["data"],
        "summary": "Search publisher data",
        "operationId": "search",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSuperSearchRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Search"
                },
                "example": {
                  "data": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/data/v1/sources": {
      "post": {
        "tags": ["data"],
        "summary": "Retrieve sources",
        "operationId": "sources",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostSuperSearchRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {},
                  "type": "array",
                  "title": "Response Sources"
                },
                "example": {
                  "data": {}
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/data/v1/collections": {
      "get": {
        "tags": ["data"],
        "summary": "List available collections",
        "operationId": "collections",
        "parameters": [
          {
            "name": "multi_tenancy",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "$ref": "#/components/schemas/BoolEnum"
                },
                {
                  "type": "null"
                }
              ],
              "default": false,
              "title": "Multi Tenancy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {},
                  "title": "Response Collections"
                },
                "example": {
                  "data": []
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/data/v1/publishers": {
      "post": {
        "tags": ["data"],
        "summary": "List available publishers",
        "operationId": "publishers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostPublishersRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {},
                  "type": "array",
                  "title": "Response Publishers"
                },
                "example": {
                  "data": []
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/data/v1/tenants": {
      "post": {
        "tags": ["data"],
        "summary": "List available tenants",
        "operationId": "tenants",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostTenantsRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "items": {},
                  "type": "array",
                  "title": "Response Tenants"
                },
                "example": {
                  "data": []
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/paywall": {
      "post": {
        "tags": ["core"],
        "summary": "Paywall",
        "operationId": "paywall_ai_v1_kallm_paywall_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_paywall_ai_v1_kallm_paywall_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Paywall Ai V1 Kallm Paywall Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/search": {
      "post": {
        "tags": ["core"],
        "summary": "Search",
        "operationId": "search_ai_v1_kallm_search_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SearchRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Search Ai V1 Gloo AI Chat Search Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/intent": {
      "post": {
        "tags": ["core"],
        "summary": "Extract intent from query",
        "operationId": "intent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/IntentRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Intent"
                },
                "example": {
                  "intent": 1
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "error message"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity"
          }
        }
      }
    },
    "/ai/v1/kallm/generate": {
      "post": {
        "tags": ["core"],
        "description": "",
        "summary": "Generate",
        "operationId": "generate_ai_v1_kallm_generate_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/KallmRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/generate/answers/stream": {
      "post": {
        "tags": ["answers"],
        "summary": "Generate response answer stream",
        "operationId": "generate_response_answer_stream_ai_v1_kallm_generate_answers_stream_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GenerateResponseAnswerStreamRequestBody"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully generated response answer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Generate Response Answer Stream Ai V1 Gloo AI Chat Generate Answers Stream Post"
                }
              },
              "text/plain": {
                "example": ["This is response text."]
              }
            }
          },
          "400": {
            "description": "Invalid request or prompt"
          },
          "500": {
            "description": "LLM inference error or server error"
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/paywall/related": {
      "post": {
        "tags": ["content", "content"],
        "summary": "Paywall related endpoint",
        "operationId": "paywall_related_endpoint_ai_v1_kallm_paywall_related_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Body_paywall_related_endpoint_ai_v1_kallm_paywall_related_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaywallRelatedResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/sotc/analysis": {
      "post": {
        "tags": ["sotc"],
        "summary": "Analysis",
        "operationId": "analysis_ai_v1_kallm_sotc_analysis_post",
        "parameters": [
          {
            "name": "webhook_url",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Webhook Url"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analysis_ai_v1_kallm_sotc_analysis_post"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "202": {
            "description": "Processing started in background",
            "content": {
              "application/json": {
                "example": {
                  "message": "Analysis started in background. Results will be sent to the webhook URL when complete."
                }
              }
            }
          },
          "422": {
            "description": "Invalid file format. Please upload a CSV file.",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid file format. Please upload a CSV file."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/sotc/question-answers-analysis": {
      "post": {
        "tags": ["sotc"],
        "summary": "Question Answers Analysis",
        "operationId": "question_answers_analysis_ai_v1_kallm_sotc_question_answers_analysis_post",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/QuestionAnalysisRequestBody"
                },
                "type": "array",
                "title": "Request Body"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "title": "Response Question Answers Analysis Ai V1 Gloo AI Chat Sotc Question Answers Analysis Post"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/kallm/sotc/church-metrics-ai-insights": {
      "post": {
        "tags": ["sotc"],
        "summary": "Church Metrics AI Insights",
        "operationId": "analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post",
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Body_analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChurchMetricsInsightsResponseBody"
                }
              }
            }
          },
          "422": {
            "description": "Invalid file format. Please upload a CSV file.",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Invalid file format. Please upload a CSV file."
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "example": {
                  "detail": "Internal server error"
                }
              }
            }
          }
        }
      }
    },
    "/ingestion/v1/real_time_upload": {
      "post": {
        "tags": ["ingestion"],
        "summary": "Real-time ingestion",
        "description": "",
        "operationId": "real_time_upload",
        "requestBody": {
          "description": "The request body should be a JSON object with the following structure:",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RealTimeIngestionRequest"
              },
              "example": {
                "content": "This is the full text content that needs to be processed and indexed for search. It is the only required field.",
                "filename": "sample_document_name.txt",
                "producer_id": "producer-123",
                "publisher_id": "550e8400-e29b-41d4-a716-446655440000",
                "denomination": "Catholic",
                "evergreen": true,
                "drm": ["aspen", "kallm"],
                "author": ["Jane Doe", "John Smith"],
                "isbn": "978-3-16-148410-0",
                "item_title": "Main Document Title",
                "item_subtitle": "An informative subtitle",
                "item_image": "https://example.com/images/document-cover.jpg",
                "item_url": "https://example.com/original-content",
                "item_file": "https://example.com/downloads/document.pdf",
                "item_summary": "A brief summary of the document's content and purpose.",
                "item_number": "DOC-2023-001",
                "item_extra": "Additional information about this item",
                "item_tags": ["documentation", "api", "tutorial", "reference"],
                "h2_title": "Section Heading",
                "h2_subtitle": "Section Subheading",
                "h2_image": "https://example.com/images/section-image.jpg",
                "h2_url": "https://example.com/section",
                "h2_file": "https://example.com/downloads/section.pdf",
                "h2_summary": "Summary of this specific section.",
                "h2_number": "2.1",
                "h2_extra": "Additional section metadata",
                "h3_title": "Subsection Heading",
                "h3_subtitle": "Subsection Subheading",
                "h3_image": "https://example.com/images/subsection-image.jpg",
                "h3_url": "https://example.com/subsection",
                "h3_file": "https://example.com/downloads/subsection.pdf",
                "h3_summary": "Summary of this specific subsection.",
                "h3_number": "2.1.3",
                "h3_extra": "Additional subsection metadata",
                "type": "Article",
                "duration": "15 minutes",
                "pages": "12",
                "publication_date": "2023-07-15",
                "hosted_url": "https://cdn.example.com/hosted-content",
                "pub_type": "technical"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Content successfully uploaded and processed."
          },
          "400": {
            "description": "Bad Request - The request was improperly formatted."
          },
          "401": {
            "description": "Unauthorized - The JWT token is missing or invalid."
          },
          "422": {
            "description": "Unprocessable Entity - The request is well-formed but contains semantic errors."
          }
        },
        "security": [
          {
            "bearerAuth": ["api/access"]
          }
        ]
      }
    },
    "/ai/v1/data/affiliates/referenced-items": {
      "post": {
        "tags": ["data"],
        "summary": "Get Referenced Items for Affiliates",
        "description": "Retrieves a list of recommended items based on a user query, designed for affiliate use cases. Allows filtering by media type, publisher, and snippet counts.",
        "operationId": "get-affiliate-referenced-items",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for retrieving affiliate recommendations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AffiliatesRequestBody"
              },
              "example": {
                "max_snippet_count_overall": 300,
                "media_types": ["article", "book"],
                "min_snippet_count_per_item": 2,
                "publishers": [],
                "query": "Why do I do what I hate?",
                "certainty_threshold": 0.3
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response returning a list of referenced items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AffiliatesItem"
                  }
                },
                "example": [
                  {
                    "item_id": "961a22cc-4e4f-49de-ac0e-ab6d6274f7b4",
                    "author": [],
                    "filename": "LivingABadLife.txt",
                    "denomination": "",
                    "duration": "",
                    "item_title": "",
                    "item_subtitle": "",
                    "item_image": "",
                    "item_url": "",
                    "item_tags": "",
                    "h2_id": "",
                    "h2_title": "",
                    "h2_subtitle": "",
                    "h2_image": "",
                    "h2_url": "",
                    "h2_tags": null,
                    "h3_id": "",
                    "h3_title": "",
                    "h3_subtitle": "",
                    "h3_image": "",
                    "h3_url": "",
                    "h3_tags": null,
                    "h2_summary": "",
                    "publication_date": "",
                    "publisher": "Santiago Speaks Secondarily",
                    "publisher_id": "aabe1584-5fec-49e2-8fb1-165398bc5753",
                    "publisher_url": "s.com",
                    "publisher_logo": "<https://dapologeticsimages.s3.us-east-1.amazonaws.com/logos/logo_1746801634876.png>",
                    "summary": "",
                    "type": "article",
                    "hosted_url": "",
                    "snippet_count": 5,
                    "cumulative_certainty": 2.913913071155548
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Unauthorized - The JWT token is missing or invalid."
          },
          "422": {
            "description": "Validation Error - The request body is invalid."
          }
        }
      }
    },
    "/ai/v1/data/items/recommendations/base": {
      "post": {
        "tags": ["data"],
        "summary": "Get Base Item Recommendations",
        "description": "Retrieves item recommendations with basic snippet metadata (excluding full snippet text). Requires specifying a collection and tenant for the search.",
        "operationId": "get-base-item-recommendations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for retrieving base item recommendations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsRequestBody"
              },
              "example": {
                "collection": "GlooProd",
                "max_snippet_count_overall": 10,
                "media_types": [],
                "min_snippet_count_per_item": 1,
                "publishers": ["Test New Tenant"],
                "query": "Plans God has for me",
                "tenant": "TestNewTenant",
                "certainty_threshold": 0.5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response returning a list of items with basic snippet metadata.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ItemsRecommendationsResponseItemBase"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was improperly formatted or contained invalid parameters (e.g., invalid collection or tenant configuration).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid Collection": {
                    "value": {
                      "detail": "Invalid Collection, see /ai/v1/data/collection/names"
                    }
                  },
                  "Missing Tenant": {
                    "value": {
                      "detail": "Unable to search multi-tenant collection. Provide a tenant, see /ai/v1/data/tenant/names"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The JWT token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Unauthorized"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - The request body fails validation (e.g., missing required fields).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred while searching for sources.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Error searching sources. Our team has been notified."
                }
              }
            }
          }
        }
      }
    },
    "/ai/v1/data/items/recommendations/verbose": {
      "post": {
        "tags": ["data"],
        "summary": "Get Verbose Item Recommendations",
        "description": "Retrieves item recommendations with detailed snippet metadata, including the full snippet text. Requires specifying a collection and tenant for the search.",
        "operationId": "get-verbose-item-recommendations",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "description": "Parameters for retrieving verbose item recommendations.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemsRequestBody"
              },
              "example": {
                "collection": "GlooProd",
                "max_snippet_count_overall": 10,
                "media_types": [],
                "min_snippet_count_per_item": 1,
                "publishers": ["Test New Tenant"],
                "query": "Plans God has for me",
                "tenant": "TestNewTenant",
                "certainty_threshold": 0.5
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response returning a list of items with full snippet text.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ItemsRecommendationsResponseItemVerbose"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request - The request was improperly formatted or contained invalid parameters (e.g., invalid collection or tenant configuration).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "Invalid Collection": {
                    "value": {
                      "detail": "Invalid Collection, see /ai/v1/data/collection/names"
                    }
                  },
                  "Missing Tenant": {
                    "value": {
                      "detail": "Unable to search multi-tenant collection. Provide a tenant, see /ai/v1/data/tenant/names"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - The JWT token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Unauthorized"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error - The request body fails validation (e.g., missing required fields).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error - An error occurred while searching for sources.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "detail": "Error searching sources. Our team has been notified."
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AvailableTasks": {
        "type": "string",
        "enum": ["stop"],
        "title": "AvailableTasks"
      },
      "AvailableVersions": {
        "type": "string",
        "enum": ["v1"],
        "title": "AvailableVersions"
      },
      "Body_analysis_ai_v1_kallm_sotc_analysis_post": {
        "properties": {
          "csvFile": {
            "type": "string",
            "format": "binary",
            "title": "CSV file containing data to analyze",
            "description": "The first line of the CSV file should contain the header, and the second line should contain the national average. The rest of the file should contain the data to analyze."
          }
        },
        "type": "object",
        "required": ["csvFile"],
        "title": "Body_analysis_ai_v1_kallm_sotc_analysis_post"
      },
      "Body_analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post": {
        "properties": {
          "nationalCsvFile": {
            "type": "string",
            "format": "binary",
            "title": "CSV file containing the national church metrics data",
            "description": "Upload a CSV file containing the national church metrics data."
          },
          "orgCsvFile": {
            "type": "string",
            "format": "binary",
            "title": "CSV file containing the organization church metrics data",
            "description": "Upload a CSV file containing the organization church metrics data (optional)."
          }
        },
        "type": "object",
        "required": ["nationalCsvFile"],
        "title": "Body_analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post"
      },
      "Body_paywall_ai_v1_kallm_paywall_post": {
        "properties": {
          "paywall": {
            "$ref": "#/components/schemas/PaywallBody"
          },
          "request_body": {
            "$ref": "#/components/schemas/SearchFilters"
          }
        },
        "type": "object",
        "required": ["paywall", "request_body"],
        "title": "Body_paywall_ai_v1_kallm_paywall_post"
      },
      "Body_paywall_related_endpoint_ai_v1_kallm_paywall_related_post": {
        "properties": {
          "request": {
            "$ref": "#/components/schemas/GetRelatedArticlesRequest"
          },
          "request_body": {
            "$ref": "#/components/schemas/SearchFilters"
          }
        },
        "type": "object",
        "required": ["request", "request_body"],
        "title": "Body_paywall_related_endpoint_ai_v1_kallm_paywall_related_post"
      },
      "BoolEnum": {
        "type": "string",
        "enum": ["true", "false"],
        "title": "BoolEnum"
      },
      "ChatFieldDropdown": {
        "type": "string",
        "enum": ["pin", "title", "summary"],
        "title": "ChatFieldDropdown"
      },
      "ChatPatchRequest": {
        "properties": {
          "new_value": {
            "title": "New Value",
            "description": "The new value for the field.",
            "default": ""
          }
        },
        "type": "object",
        "title": "ChatPatchRequest"
      },
      "ChurchMetricsInsightsResponseBody": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/Insight"
            },
            "type": "array",
            "title": "Data",
            "description": "Response data containing insights"
          }
        },
        "type": "object",
        "required": ["data"],
        "title": "ChurchMetricsInsightsResponseBody"
      },
      "EnableSourcesEnum": {
        "type": "integer",
        "enum": [0, 1, 2],
        "title": "EnableSourcesEnum"
      },
      "EnableSuggestionsEnum": {
        "type": "integer",
        "enum": [0, 1],
        "title": "EnableSuggestionsEnum"
      },
      "GenerateResponseAnswerStreamRequestBody": {
        "properties": {
          "compiledPrompt": {
            "type": "string",
            "title": "Compiledprompt",
            "description": "Prompt to generate a response"
          },
          "forceGenerate": {
            "type": "boolean",
            "title": "Forcegenerate",
            "description": "Force generation of a new response",
            "default": false
          }
        },
        "type": "object",
        "required": ["compiledPrompt"],
        "title": "GenerateResponseAnswerStreamRequestBody"
      },
      "GetRelatedArticlesRequest": {
        "properties": {
          "producer_id": {
            "type": "string",
            "title": "Producer Id",
            "description": "Producer ID of the article"
          }
        },
        "type": "object",
        "required": ["producer_id"],
        "title": "GetRelatedArticlesRequest"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "Insight": {
        "properties": {
          "title": {
            "type": "string",
            "title": "Title",
            "description": "Title of the insight"
          },
          "text": {
            "type": "string",
            "title": "Text",
            "description": "Text content of the insight"
          },
          "categories": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Categories",
            "description": "Categories this insight relates to"
          }
        },
        "type": "object",
        "required": ["title", "text", "categories"],
        "title": "Insight"
      },
      "IntentEnum": {
        "type": "integer",
        "enum": [0, 1],
        "title": "IntentEnum"
      },
      "IntentRequestBody": {
        "properties": {
          "query": {
            "type": "string",
            "title": "Query"
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "IntentRequestBody"
      },
      "KallmRequestBody": {
        "properties": {
          "prompt": {
            "type": "string",
            "title": "Prompt",
            "description": "Prompt to generate a response"
          }
        },
        "type": "object",
        "required": ["prompt"],
        "title": "KallmRequestBody"
      },
      "LlmMessage": {
        "properties": {
          "role": {
            "type": "string",
            "title": "Role",
            "description": "Role of the message sender",
            "default": "user"
          },
          "content": {
            "type": "string",
            "title": "Content",
            "description": "Content of the message",
            "default": "Hello!"
          }
        },
        "type": "object",
        "title": "LlmMessage"
      },
      "PaywallBody": {
        "properties": {
          "title": {
            "type": "string",
            "maxLength": 100,
            "minLength": 1,
            "title": "Title",
            "description": "Title of the article"
          }
        },
        "type": "object",
        "required": ["title"],
        "title": "PaywallBody"
      },
      "PaywallRelatedResponse": {
        "properties": {
          "ai_paywall_summary": {
            "type": "string",
            "title": "Ai Paywall Summary",
            "description": "Summary of the article"
          },
          "ai_why_read": {
            "type": "string",
            "title": "Ai Why Read",
            "description": "Why this article is worth reading"
          },
          "bullet_points": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Bullet Points",
            "description": "Key points from the article"
          },
          "related_articles": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Related Articles",
            "description": "Related articles"
          }
        },
        "type": "object",
        "required": [
          "ai_paywall_summary",
          "ai_why_read",
          "bullet_points",
          "related_articles"
        ],
        "title": "PaywallRelatedResponse"
      },
      "PostMessageRequestBody": {
        "properties": {
          "chat_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Chat Id",
            "description": "chat_id can also be provided as a query param",
            "default": ""
          },
          "query": {
            "type": "string",
            "title": "Query",
            "description": "Chat with KALLM.",
            "default": "What is your name?"
          },
          "character_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Character Limit",
            "description": "Limit the response length."
          },
          "sources_limit": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Sources Limit",
            "description": "Limit the sources search.",
            "default": 10
          },
          "stream": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Stream",
            "description": "Stream response as soon as tokens are generated by the model.",
            "default": false
          },
          "publishers": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Publishers",
            "description": "List of Publisher Names",
            "default": []
          }
        },
        "type": "object",
        "title": "PostMessageRequestBody"
      },
      "PostPublishersRequestBody": {
        "properties": {
          "collection": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection",
            "description": "Class/Collection to Search",
            "default": "ChatSuperCollection"
          }
        },
        "type": "object",
        "title": "PostPublishersRequestBody"
      },
      "PostSuperSearchRequestBody": {
        "properties": {
          "query": {
            "type": "string",
            "minLength": 1,
            "title": "Query",
            "description": "User Query"
          },
          "collection": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection",
            "description": "SuperCollection to Search",
            "default": "ChatSuperCollection"
          },
          "publishers": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Publishers",
            "description": "List of Publisher Names",
            "default": []
          },
          "limit": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Limit",
            "description": "Limit the sources search.",
            "default": 10
          }
        },
        "type": "object",
        "required": ["query"],
        "title": "PostSuperSearchRequestBody"
      },
      "PostTenantsRequestBody": {
        "properties": {
          "collection": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Collection",
            "description": "Class/Collection to Search",
            "default": "ChatSuperCollection"
          }
        },
        "type": "object",
        "title": "PostTenantsRequestBody"
      },
      "QuestionAnalysisRequestBody": {
        "properties": {
          "question": {
            "type": "string",
            "title": "Question",
            "description": "Question to analyze"
          },
          "questionId": {
            "type": "integer",
            "title": "Questionid",
            "description": "Question ID"
          },
          "answers": {
            "items": {
              "type": "object"
            },
            "type": "array",
            "title": "Answers",
            "description": "List of answers with their details as json objects"
          }
        },
        "type": "object",
        "required": ["question", "questionId", "answers"],
        "title": "QuestionAnalysisRequestBody"
      },
      "SearchFilters": {
        "properties": {
          "collection": {
            "type": "string",
            "title": "Collection"
          },
          "tenant": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant"
          }
        },
        "type": "object",
        "required": ["collection"],
        "title": "SearchFilters"
      },
      "SearchRequestBody": {
        "properties": {
          "search": {
            "type": "string",
            "minLength": 1,
            "title": "Search",
            "description": "Search query"
          },
          "collection": {
            "type": "string",
            "title": "Collection",
            "description": "Collection to search in"
          },
          "filters": {
            "items": {
              "type": "string"
            },
            "type": "array",
            "title": "Filters",
            "description": "List of publishers to filter by",
            "default": []
          },
          "limit": {
            "type": "integer",
            "minimum": 1.0,
            "title": "Limit",
            "description": "Number of search results to return",
            "default": 100
          },
          "tenant": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tenant",
            "description": "Tenant to search in"
          }
        },
        "type": "object",
        "required": ["search", "collection"],
        "title": "SearchRequestBody"
      },
      "StudioPostCompletionsRequestBody": {
        "properties": {
          "model": {
            "type": "string",
            "title": "Model",
            "description": "Model to use for generating responses",
            "default": "us.meta.llama3-3-70b-instruct-v1:0"
          },
          "messages": {
            "items": {
              "$ref": "#/components/schemas/LlmMessage"
            },
            "type": "array",
            "title": "Messages",
            "description": "Messages to send to the LLM"
          },
          "max_tokens": {
            "type": "integer",
            "minimum": 1024.0,
            "title": "Max Tokens",
            "description": "Max tokens to use for generating responses",
            "default": 1024
          },
          "stream": {
            "type": "boolean",
            "title": "Stream",
            "description": "Stream response as soon as tokens are generated by the model.",
            "default": false
          },
          "temperature": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Temperature",
            "description": "Temperature to use for generating responses",
            "default": 0.7
          },
          "tools": {
            "items": {
              "$ref": "#/components/schemas/Tool"
            },
            "type": "array",
            "title": "Tools",
            "description": "List of tools you want the LLM to leverage.",
            "default": []
          },
          "tool_choice": {
            "anyOf": [
              {
                "type": "string",
                "enum": ["none", "auto", "required"]
              },
              {
                "$ref": "#/components/schemas/ToolChoiceFunctionOption"
              }
            ],
            "title": "Tool Choice",
            "description": "Which tool your LLM should use among the list.",
            "default": "none"
          }
        },
        "additionalProperties": true,
        "type": "object",
        "required": ["messages"],
        "title": "StudioPostCompletionsRequestBody"
      },
      "Tool": {
        "properties": {
          "type": {
            "type": "string",
            "title": "Type",
            "description": "This field must be the literal string function.",
            "default": "function"
          },
          "function": {
            "$ref": "#/components/schemas/ToolFunction",
            "description": "Function attributes."
          }
        },
        "type": "object",
        "required": ["function"],
        "title": "Tool"
      },
      "ToolChoiceFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "The name of the chosen function to invoke."
          }
        },
        "type": "object",
        "required": ["name"],
        "title": "ToolChoiceFunction"
      },
      "ToolChoiceFunctionOption": {
        "properties": {
          "function": {
            "$ref": "#/components/schemas/ToolChoiceFunction",
            "description": "The encapsulation of the chosen function to invoke."
          },
          "type": {
            "type": "string",
            "title": "Type",
            "description": "This field must be the literal string function.",
            "default": "function"
          }
        },
        "type": "object",
        "required": ["function"],
        "title": "ToolChoiceFunctionOption"
      },
      "ToolFunction": {
        "properties": {
          "name": {
            "type": "string",
            "title": "Name",
            "description": "Name of the function."
          },
          "description": {
            "type": "string",
            "title": "Description",
            "description": "Description of the function."
          },
          "parameters": {
            "type": "object",
            "title": "Parameters",
            "description": "Parameters to call the function.",
            "default": []
          },
          "strict": {
            "type": "boolean",
            "title": "Strict",
            "description": "Whether to adhere strictly to the parameters definition.",
            "default": false
          }
        },
        "type": "object",
        "required": ["name", "description"],
        "title": "ToolFunction"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": ["loc", "msg", "type"],
        "title": "ValidationError"
      },
      "RealTimeIngestionRequest": {
        "type": "object",
        "required": ["publisher_id", "content"],
        "properties": {
          "publisher_id": {
            "type": "string",
            "format": "uuid",
            "description": "UUID of the publisher associated with the content. This must be associated with your organization."
          },
          "content": {
            "type": "string",
            "description": "The actual text content to be ingested and chunked."
          },
          "filename": {
            "type": "string",
            "description": "Custom filename for this content."
          },
          "type": {
            "type": "string",
            "description": "Content type (e.g., article, blog, tutorial)."
          },
          "item_title": {
            "type": "string",
            "description": "Title of the content item."
          },
          "item_subtitle": {
            "type": "string",
            "description": "Subtitle of the content item."
          },
          "item_summary": {
            "type": "string",
            "description": "Brief summary of the content."
          },
          "item_image": {
            "type": "string",
            "format": "uri",
            "description": "URL to image associated with the content."
          },
          "item_url": {
            "type": "string",
            "format": "uri",
            "description": "URL to the original content."
          },
          "item_file": {
            "type": "string",
            "format": "uri",
            "description": "URL to a file associated with the content."
          },
          "item_number": {
            "type": "string",
            "description": "Identifying number for the content item."
          },
          "item_extra": {
            "type": "string",
            "description": "Additional information about the content item."
          },
          "item_tags": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "Tags associated with the content (can be array or comma-separated string)."
          },
          "author": {
            "oneOf": [
              {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              {
                "type": "string"
              }
            ],
            "description": "Author(s) of the content (can be array or comma-separated string)."
          },
          "isbn": {
            "type": "string",
            "description": "ISBN if content is from a book."
          },
          "publication_date": {
            "type": "string",
            "format": "date",
            "description": "Date when the content was published (recommended format: YYYY-MM-DD)."
          },
          "producer_id": {
            "type": "string",
            "description": "ID of the content producer."
          },
          "denomination": {
            "type": "string",
            "description": "Religious denomination (if applicable)."
          },
          "pub_type": {
            "type": "string",
            "description": "Publication type."
          },
          "hosted_url": {
            "type": "string",
            "format": "uri",
            "description": "URL where the content is hosted."
          },
          "pages": {
            "type": "string",
            "description": "Number of pages (for documents)."
          },
          "duration": {
            "type": "string",
            "description": "Duration (for audio/video content)."
          },
          "h2_title": {
            "type": "string",
            "description": "Title for level 2 heading/section."
          },
          "h2_subtitle": {
            "type": "string",
            "description": "Subtitle for level 2 heading/section."
          },
          "h2_image": {
            "type": "string",
            "format": "uri",
            "description": "Image URL for level 2 heading/section."
          },
          "h2_url": {
            "type": "string",
            "format": "uri",
            "description": "URL for level 2 heading/section."
          },
          "h2_file": {
            "type": "string",
            "format": "uri",
            "description": "File URL for level 2 heading/section."
          },
          "h2_summary": {
            "type": "string",
            "description": "Summary for level 2 heading/section."
          },
          "h2_number": {
            "type": "string",
            "description": "Number for level 2 heading/section."
          },
          "h2_extra": {
            "type": "string",
            "description": "Additional info for level 2 heading/section."
          },
          "h3_title": {
            "type": "string",
            "description": "Title for level 3 heading/section."
          },
          "h3_subtitle": {
            "type": "string",
            "description": "Subtitle for level 3 heading/section."
          },
          "h3_image": {
            "type": "string",
            "format": "uri",
            "description": "Image URL for level 3 heading/section."
          },
          "h3_url": {
            "type": "string",
            "format": "uri",
            "description": "URL for level 3 heading/section."
          },
          "h3_file": {
            "type": "string",
            "format": "uri",
            "description": "File URL for level 3 heading/section."
          },
          "h3_summary": {
            "type": "string",
            "description": "Summary for level 3 heading/section."
          }
        }
      },
      "AffiliatesRequestBody": {
        "type": "object",
        "title": "AffiliatesRequestBody",
        "properties": {
          "query": {
            "type": "string",
            "description": "The prompt that the user enters into the application."
          },
          "certainty_threshold": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Certainty Threshold",
            "description": "The minimum certainty threshold for snippets.",
            "default": 0.75
          },
          "max_snippet_count_overall": {
            "type": "integer",
            "description": "The maximum number of snippets to search through overall.",
            "default": 300
          },
          "media_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["audio", "video", "book", "article"]
            },
            "description": "The type(s) of media for the items returned.",
            "default": []
          },
          "min_snippet_count_per_item": {
            "type": "integer",
            "description": "The minimum number of snippets that must be associated with an item for it to be returned.",
            "minimum": 1,
            "default": 1
          },
          "publishers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The publisher(s) whose items should be recommended.",
            "default": []
          }
        },
        "required": ["query"]
      },
      "AffiliatesItem": {
        "type": "object",
        "title": "AffiliatesItem",
        "properties": {
          "item_id": { "type": "string", "format": "uuid" },
          "author": { "type": "array", "items": { "type": "string" } },
          "filename": { "type": "string" },
          "denomination": { "type": "string" },
          "duration": { "type": "string" },
          "item_title": { "type": "string" },
          "item_subtitle": { "type": "string" },
          "item_image": { "type": "string", "format": "uri" },
          "item_url": { "type": "string", "format": "uri" },
          "item_tags": { "type": "string" },
          "h2_id": { "type": "string" },
          "h2_title": { "type": "string" },
          "h2_subtitle": { "type": "string" },
          "h2_image": { "type": "string", "format": "uri" },
          "h2_url": { "type": "string", "format": "uri" },
          "h2_tags": { "type": "string", "nullable": true },
          "h3_id": { "type": "string" },
          "h3_title": { "type": "string" },
          "h3_subtitle": { "type": "string" },
          "h3_image": { "type": "string", "format": "uri" },
          "h3_url": { "type": "string", "format": "uri" },
          "h3_tags": { "type": "string", "nullable": true },
          "h2_summary": { "type": "string" },
          "publication_date": { "type": "string" },
          "publisher": { "type": "string" },
          "publisher_id": { "type": "string", "format": "uuid" },
          "publisher_url": { "type": "string", "format": "uri" },
          "publisher_logo": { "type": "string", "format": "uri" },
          "summary": { "type": "string" },
          "type": { "type": "string" },
          "hosted_url": { "type": "string", "format": "uri" },
          "snippet_count": { "type": "integer" },
          "cumulative_certainty": { "type": "number", "format": "float" }
        }
      },
      "ItemsRequestBody": {
        "type": "object",
        "title": "ItemsRequestBody",
        "properties": {
          "query": {
            "type": "string",
            "description": "The prompt that the user enters into the application."
          },
          "certainty_threshold": {
            "type": "number",
            "maximum": 1.0,
            "minimum": 0.0,
            "title": "Certainty Threshold",
            "description": "The minimum certainty threshold for snippets.",
            "default": 0.75
          },
          "collection": {
            "type": "string",
            "description": "The collection to search in."
          },
          "tenant": {
            "type": "string",
            "description": "The tenant to search."
          },
          "publishers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "A list of Publisher Names. Only publishers belonging to your organization are allowed."
          },
          "max_snippet_count_overall": {
            "type": "integer",
            "description": "The maximum number of snippets to search through overall."
          },
          "min_snippet_count_per_item": {
            "type": "integer",
            "description": "The minimum number of snippets for an item to be returned.",
            "minimum": 1,
            "default": 1
          },
          "media_types": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["audio", "video", "book", "article"]
            },
            "description": "The type(s) of media for the items returned.",
            "default": []
          }
        },
        "required": [
          "query",
          "collection",
          "tenant",
          "publishers",
          "max_snippet_count_overall"
        ]
      },
      "ItemsRecommendationsResponseItemBase": {
        "type": "object",
        "title": "ItemsRecommendationsResponseItemBase",
        "allOf": [{ "$ref": "#/components/schemas/AffiliatesItem" }],
        "properties": {
          "uuids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemRecommendationUuidBase"
            }
          }
        }
      },
      "ItemsRecommendationsResponseItemVerbose": {
        "type": "object",
        "title": "ItemsRecommendationsResponseItemVerbose",
        "allOf": [{ "$ref": "#/components/schemas/AffiliatesItem" }],
        "properties": {
          "uuids": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ItemRecommendationUuidVerbose"
            }
          }
        }
      },
      "ItemRecommendationUuidBase": {
        "type": "object",
        "title": "ItemRecommendationUuidBase",
        "properties": {
          "uuid": { "type": "string" },
          "ai_title": { "type": "string" },
          "ai_subtitle": { "type": "string" },
          "summary": { "type": "string" },
          "time_start": { "type": "string" },
          "time_end": { "type": "string" },
          "part": { "type": "integer" },
          "certainty": { "type": "number", "format": "float" }
        }
      },
      "ItemRecommendationUuidVerbose": {
        "type": "object",
        "title": "ItemRecommendationUuidVerbose",
        "allOf": [
          { "$ref": "#/components/schemas/ItemRecommendationUuidBase" }
        ],
        "properties": {
          "snippet": {
            "type": "string",
            "description": "The full text of the snippet."
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "detail": {
            "type": "string",
            "description": "A human-readable description of the error."
          }
        },
        "title": "Error"
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Bearer authentication header of the form Bearer `<token>`, where `<token>` is your [auth token](/studio/manage-api-credentials)."
      }
    }
  },
  "security": [
    {
      "bearerAuth": []
    }
  ]
}
