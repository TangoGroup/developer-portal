openapi: 3.0.0
info:
  title: Accounts API
  version: 1.0.0
  description: Gloo Accounts API.
servers:
  - url: https://localhost:3003
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Client:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        redirectUris:
          type: array
          items:
            type: string
            format: uri
          minItems: 1
        allowedScopes:
          type: array
          items:
            type: string
          minItems: 1
      required:
        - name
        - redirectUris
        - allowedScopes
    ClientResponse:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
        clientId:
          type: string
        clientSecret:
          type: string
        redirectUris:
          type: array
          items:
            type: string
        allowedScopes:
          type: array
          items:
            type: string
        createdAt:
          type: string
          nullable: true
        oauthTokens:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: string
              accessToken:
                type: string
              refreshToken:
                type: string
              clientId:
                type: string
              userId:
                type: string
              scopes:
                type: array
                items:
                  type: string
              expiresAt:
                type: string
                nullable: true
              createdAt:
                type: string
                nullable: true
            required:
              - id
              - accessToken
              - refreshToken
              - clientId
              - userId
              - scopes
              - expiresAt
              - createdAt
      required:
        - id
        - userId
        - name
        - clientId
        - clientSecret
        - redirectUris
        - allowedScopes
        - createdAt
        - oauthTokens
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
        error_description:
          type: string
      required:
        - error
    AuthorizeRequest:
      type: object
      properties:
        response_type:
          type: string
          enum:
            - code
        client_id:
          type: string
        redirect_uri:
          type: string
          format: uri
        scope:
          type: string
        state:
          type: string
        nonce:
          type: string
        code_challenge:
          type: string
        code_challenge_method:
          type: string
          enum:
            - S256
        connection:
          type: string
        prompt:
          type: string
          enum:
            - none
            - consent
            - login
        otp:
          type: string
        username:
          type: string
        realm:
          type: string
      required:
        - response_type
        - client_id
        - redirect_uri
        - scope
        - state
    TokenRequest:
      type: object
      properties:
        grant_type:
          type: string
          enum:
            - authorization_code
            - refresh_token
            - client_credentials
        code:
          type: string
        refresh_token:
          type: string
        redirect_uri:
          type: string
          format: uri
        client_id:
          type: string
        client_secret:
          type: string
          description: >-
            Client secret for client authentication. Required only when using
            client_secret_basic or client_secret_post authentication methods.
            Not required when using PKCE or client_secret_jwt authentication
            methods.
        code_verifier:
          type: string
        scope:
          type: string
        audience:
          type: string
        state:
          type: string
        prompt:
          type: string
          enum:
            - none
            - consent
            - login
      required:
        - grant_type
        - client_id
        - client_secret
    IntrospectRequest:
      type: object
      properties:
        token:
          type: string
        token_type_hint:
          type: string
          enum:
            - access_token
            - refresh_token
        client_id:
          type: string
        client_secret:
          type: string
      required:
        - token
        - client_id
        - client_secret
    RevokeRequest:
      type: object
      properties:
        token:
          type: string
        token_type_hint:
          type: string
          enum:
            - access_token
            - refresh_token
        client_id:
          type: string
        client_secret:
          type: string
      required:
        - token
        - client_id
        - client_secret
    UserinfoResponse:
      type: object
      properties:
        sub:
          type: string
          description: Subject identifier - Unique identifier for the user
        name:
          type: string
          description: Full name of the user
        email:
          type: string
          format: email
          description: Email address of the user
        email_verified:
          type: boolean
          description: Whether the email address has been verified
        updated_at:
          type: number
          description: Timestamp of when the user information was last updated
      required:
        - sub
      description: UserInfo response schema as per OpenID Connect Core 1.0
    JWKS:
      type: object
      properties:
        keys:
          type: array
          items:
            type: object
            properties:
              kty:
                type: string
                description: Key type - must be "RSA"
              use:
                type: string
                description: Public key use - must be "sig"
              kid:
                type: string
                description: Key ID - unique identifier for the key
              alg:
                type: string
                description: Algorithm - must be "RS256"
              'n':
                type: string
                description: RSA modulus - base64url encoded
              e:
                type: string
                description: RSA exponent - base64url encoded
            required:
              - kty
              - use
              - kid
              - alg
              - 'n'
              - e
          description: Array of JSON Web Key (JWK) objects
      required:
        - keys
      description: JSON Web Key Set (JWKS) schema as per RFC 7517
  parameters: {}
paths:
  /clients:
    get:
      tags:
        - Clients
      summary: List clients
      description: Retrieve all OAuth clients owned by the authenticated user
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of OAuth clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ClientResponse'
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                error_description: Authentication required
    post:
      tags:
        - Clients
      summary: Create a new client
      description: >-
        Create a new OAuth client with the specified configuration. Client ID
        and secret are automatically generated.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Invalid request - Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_request
                error_description: Invalid client configuration
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                error_description: Authentication required
        '500':
          description: Server error - Failed to create client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: Failed to create client
  /clients/{id}:
    get:
      tags:
        - Clients
      summary: Get a client
      description: Retrieve details of a specific OAuth client by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the client
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Invalid request - Invalid client ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_request
                error_description: Invalid client ID format
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                error_description: Authentication required
        '404':
          description: Not Found - Client does not exist or user does not have access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                error_description: Client not found
    put:
      tags:
        - Clients
      summary: Update a client
      description: Update an existing OAuth client configuration
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the client to update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Client'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientResponse'
        '400':
          description: Invalid request - Request validation failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_request
                error_description: Invalid client configuration
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                error_description: Authentication required
        '404':
          description: Not Found - Client does not exist or user does not have access
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: not_found
                error_description: Client not found
        '500':
          description: Server error - Failed to update client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: Failed to update client
    delete:
      tags:
        - Clients
      summary: Delete a client
      description: Permanently delete an OAuth client
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The unique identifier of the client to delete
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Client deleted successfully
        '400':
          description: Invalid request - Invalid client ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_request
                error_description: Invalid client ID format
        '401':
          description: Unauthorized - User is not authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                error_description: Authentication required
        '500':
          description: Server error - Failed to delete client
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: Failed to delete client
  /authorize:
    get:
      tags:
        - OAuth
      summary: Authorize request
      description: Start the OAuth authorization flow
      parameters:
        - in: query
          name: response_type
          required: true
          schema:
            type: string
        - in: query
          name: client_id
          required: true
          schema:
            type: string
        - in: query
          name: redirect_uri
          required: true
          schema:
            type: string
        - in: query
          name: scope
          required: true
          schema:
            type: string
        - in: query
          name: state
          required: true
          schema:
            type: string
        - in: query
          name: nonce
          required: false
          schema:
            type: string
        - in: query
          name: code_challenge
          required: false
          schema:
            type: string
        - in: query
          name: code_challenge_method
          required: false
          schema:
            type: string
        - in: query
          name: connection
          required: false
          schema:
            type: string
        - in: query
          name: prompt
          required: false
          schema:
            type: string
        - in: query
          name: otp
          required: false
          schema:
            type: string
        - in: query
          name: username
          required: false
          schema:
            type: string
        - in: query
          name: realm
          required: false
          schema:
            type: string
      responses:
        '302':
          description: |-
            Successful redirect. Can redirect to one of the following:
            - Login page if user is not authenticated
            - Consent page if user has not consented to scopes
            - Client redirect URI with authorization code
            - Connection provider (e.g. Google) for SSO
          headers:
            Location:
              schema:
                type: string
              description: |-
                Redirect URL. Can be:
                - /login for authentication
                - /consent for user consent
                - Client redirect_uri with code
                - SSO provider URL
            Set-Cookie:
              schema:
                type: string
              description: OAuth session cookie for maintaining state
        '400':
          description: >-
            Invalid request. Possible errors:

            - invalid_request: Missing or invalid parameters

            - invalid_scope: Requested scopes are not supported or not allowed
            for client

            - invalid_client: Client ID is invalid

            - invalid_redirect_uri: Redirect URI is not allowed for client

            - invalid_connection: Requested connection is not supported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  error: invalid_request
                  error_description: Missing required parameters
        '401':
          description: >-
            Unauthorized. User is not authenticated and no connection was
            provided.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  error: unauthorized
                  error_description: User is not authenticated
  /oauth/token:
    post:
      tags:
        - OAuth
      summary: Get OAuth token
      description: Exchange authorization code for access token or refresh existing token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRequest'
            examples:
              authorization_code:
                value:
                  grant_type: authorization_code
                  code: authorization_code_here
                  redirect_uri: https://client.example.com/callback
                  code_verifier: pkce_verifier_string
                  client_id: client_id_here
              refresh_token:
                value:
                  grant_type: refresh_token
                  refresh_token: refresh_token_here
                  scope: openid profile email
                  client_id: client_id_here
              client_credentials:
                value:
                  grant_type: client_credentials
                  scope: api:read api:write
                  client_id: client_id_here
                  client_secret: client_secret_here
      responses:
        '200':
          description: Token issued successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: The issued access token
                  token_type:
                    type: string
                    enum:
                      - Bearer
                    description: The type of token issued
                  expires_in:
                    type: number
                    description: Number of seconds until the access token expires
                  refresh_token:
                    type: string
                    description: >-
                      A refresh token that can be used to obtain new access
                      tokens
                  scope:
                    type: string
                    description: Space-separated list of granted scopes
                  id_token:
                    type: string
                    description: >-
                      JWT containing user claims (only included for OpenID
                      Connect flows)
                required:
                  - access_token
                  - token_type
                  - expires_in
              examples:
                authorization_code_response:
                  value:
                    access_token: eyJhbGciOiJSUzI1NiIsInR5...
                    token_type: Bearer
                    expires_in: 3600
                    refresh_token: eyJhbGciOiJSUzI1NiIsInR5...
                    scope: openid profile email
                    id_token: eyJhbGciOiJSUzI1NiIsInR5...
                refresh_token_response:
                  value:
                    access_token: eyJhbGciOiJSUzI1NiIsInR5...
                    token_type: Bearer
                    expires_in: 3600
                    refresh_token: eyJhbGciOiJSUzI1NiIsInR5...
                    scope: openid profile email
                client_credentials_response:
                  value:
                    access_token: eyJhbGciOiJSUzI1NiIsInR5...
                    token_type: Bearer
                    expires_in: 3600
                    scope: api:read api:write
        '400':
          description: Invalid request - Missing or malformed parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_request:
                  value:
                    error: invalid_request
                    error_description: Missing required parameters
                invalid_grant:
                  value:
                    error: invalid_grant
                    error_description: >-
                      The provided authorization grant is invalid, expired, or
                      revoked
                invalid_scope:
                  value:
                    error: invalid_scope
                    error_description: The requested scope is invalid, unknown, or malformed
                invalid_code_verifier:
                  value:
                    error: invalid_grant
                    error_description: The code verifier does not match the code challenge
                unsupported_grant_type:
                  value:
                    error: unsupported_grant_type
                    error_description: The authorization grant type is not supported
        '401':
          description: Unauthorized - Invalid client authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_client
                error_description: Client authentication failed
        '403':
          description: >-
            Forbidden - Client is not authorized for the requested grant type or
            scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: insufficient_scope
                error_description: The client is not authorized for the requested scope
        '500':
          description: Server error - Failed to issue token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: An error occurred while processing the token request
  /oauth/introspect:
    post:
      tags:
        - OAuth
      summary: Introspect token
      description: Get information about an OAuth token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/IntrospectRequest'
            example:
              token: access_token_or_refresh_token_here
              token_type_hint: access_token
              client_id: client_id_here
              client_secret: client_secret_here
      responses:
        '200':
          description: >-
            Token introspection response. If the token is invalid or expired,
            active will be false.
          content:
            application/json:
              schema:
                type: object
                properties:
                  active:
                    type: boolean
                    description: Indicates if the token is currently valid
                  client_id:
                    type: string
                    description: OAuth 2.0 client identifier the token was issued to
                  username:
                    type: string
                    description: >-
                      Human-readable identifier for the resource owner who
                      authorized the token
                  scope:
                    type: string
                    description: Space-separated list of scopes associated with the token
                  sub:
                    type: string
                    description: Subject identifier of the resource owner
                  aud:
                    type: string
                    description: Intended audience for the token
                  iss:
                    type: string
                    description: Issuer of the token
                  exp:
                    type: number
                    description: Timestamp when the token will expire
                  iat:
                    type: number
                    description: Timestamp when the token was issued
                  token_type:
                    type: string
                    enum:
                      - Bearer
                      - Refresh
                    description: Type of the token
                  token_use:
                    type: string
                    enum:
                      - access_token
                      - refresh_token
                    description: Intended use of the token
                required:
                  - active
              examples:
                active_token:
                  value:
                    active: true
                    client_id: example_client_id
                    username: john.doe@example.com
                    scope: openid profile email
                    sub: user123
                    aud: example_client_id
                    iss: https://auth.example.com
                    exp: 1735689600
                    iat: 1735685600
                    token_type: Bearer
                    token_use: access_token
                inactive_token:
                  value:
                    active: false
        '400':
          description: Invalid request - Missing or malformed parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  value:
                    error: invalid_request
                    error_description: The token parameter is required
                invalid_token_type_hint:
                  value:
                    error: invalid_request
                    error_description: Invalid token_type_hint parameter
        '401':
          description: Unauthorized - Invalid client authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_client
                error_description: Client authentication failed
        '500':
          description: Server error - Failed to introspect token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: An error occurred while introspecting the token
  /oauth/revoke:
    post:
      tags:
        - OAuth
      summary: Revoke token
      description: Revoke an OAuth token
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RevokeRequest'
            example:
              token: access_token_or_refresh_token_here
              token_type_hint: access_token
              client_id: client_id_here
              client_secret: client_secret_here
      responses:
        '200':
          description: >-
            Token revoked successfully. The response body will be empty as per
            RFC 7009.
          content:
            application/json:
              schema:
                type: object
                properties: {}
                description: Empty response body
        '400':
          description: Invalid request - Missing or malformed parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                missing_token:
                  value:
                    error: invalid_request
                    error_description: The token parameter is required
                invalid_token_type_hint:
                  value:
                    error: invalid_request
                    error_description: >-
                      Invalid token_type_hint parameter. Must be either
                      "access_token" or "refresh_token"
                unsupported_token_type:
                  value:
                    error: unsupported_token_type
                    error_description: The token type is not supported for revocation
        '401':
          description: Unauthorized - Invalid client authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_client
                error_description: Client authentication failed
        '403':
          description: Forbidden - Client is not authorized to revoke this token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: insufficient_permissions
                error_description: The client is not authorized to revoke this token
        '500':
          description: Server error - Failed to revoke token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: An error occurred while revoking the token
  /userinfo:
    get:
      tags:
        - OAuth
      summary: Get user info
      description: >-
        Returns claims about the authenticated end-user. Requires a valid access
        token with appropriate scopes. Implements OpenID Connect Core 1.0
        specification.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved user information
          content:
            application/json:
              schema:
                type: object
                properties:
                  sub:
                    type: string
                    description: Subject identifier - Unique identifier for the user
                  name:
                    type: string
                    description: Full name of the user
                  email:
                    type: string
                    format: email
                    description: Email address of the user
                  email_verified:
                    type: boolean
                    description: Whether the email address has been verified
                  updated_at:
                    type: number
                    description: Timestamp of when the user information was last updated
                required:
                  - sub
              example:
                sub: user123
                name: John Doe
                email: john.doe@example.com
                email_verified: true
                updated_at: 1699574400
        '400':
          description: Invalid request - Malformed authorization header
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: invalid_request
                error_description: Invalid authorization header format
        '401':
          description: Unauthorized - Invalid or expired access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                invalid_token:
                  value:
                    error: invalid_token
                    error_description: The access token is invalid
                expired_token:
                  value:
                    error: invalid_token
                    error_description: The access token has expired
        '403':
          description: Forbidden - Insufficient scope
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: insufficient_scope
                error_description: The access token does not have the required scopes
        '500':
          description: Server error - Failed to retrieve user information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: An error occurred while retrieving user information
  /.well-known/jwks.json:
    get:
      tags:
        - OAuth
      summary: Get JSON Web Key Set
      description: >-
        Get the JSON Web Key Set containing the public keys used to verify JWT
        signatures
      responses:
        '200':
          description: Successfully retrieved JWKS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWKS'
              example:
                keys:
                  - kty: RSA
                    use: sig
                    kid: key-1
                    alg: RS256
                    'n': base64url_encoded_modulus
                    e: AQAB
        '500':
          description: Server error - Failed to retrieve JWKS
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: Failed to retrieve JWKS
  /.well-known/openid-configuration:
    get:
      tags:
        - OAuth
      summary: Get OpenID configuration
      description: >-
        Returns OpenID Provider configuration information as specified in OpenID
        Connect Discovery 1.0. This endpoint allows clients to dynamically
        discover the authorization servers capabilities and endpoints.
      responses:
        '200':
          description: Successfully retrieved OpenID Provider configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  issuer:
                    type: string
                    format: uri
                    description: >-
                      URL using the https scheme that identifies the
                      authorization server
                    example: https://auth.example.com
                  authorization_endpoint:
                    type: string
                    format: uri
                    description: URL of the authorization server's authorization endpoint
                    example: https://auth.example.com/authorize
                  token_endpoint:
                    type: string
                    format: uri
                    description: URL of the authorization server's token endpoint
                    example: https://auth.example.com/oauth/token
                  userinfo_endpoint:
                    type: string
                    format: uri
                    description: URL of the authorization server's UserInfo endpoint
                    example: https://auth.example.com/userinfo
                  jwks_uri:
                    type: string
                    format: uri
                    description: URL of the authorization server's JWK Set document
                    example: https://auth.example.com/.well-known/jwks.json
                  revocation_endpoint:
                    type: string
                    format: uri
                    description: >-
                      URL of the authorization server's OAuth 2.0 revocation
                      endpoint
                    example: https://auth.example.com/oauth/revoke
                  introspection_endpoint:
                    type: string
                    format: uri
                    description: >-
                      URL of the authorization server's OAuth 2.0 introspection
                      endpoint
                    example: https://auth.example.com/oauth/introspect
                  response_types_supported:
                    type: array
                    description: List of OAuth 2.0 response_type values supported
                    items:
                      type: string
                      enum:
                        - code
                        - none
                    example:
                      - code
                      - none
                  subject_types_supported:
                    type: array
                    description: List of subject identifier types supported
                    items:
                      type: string
                      enum:
                        - public
                    example:
                      - public
                  id_token_signing_alg_values_supported:
                    type: array
                    description: >-
                      List of JWS signing algorithms supported for ID Token
                      signatures
                    items:
                      type: string
                      enum:
                        - RS256
                    example:
                      - RS256
                  scopes_supported:
                    type: array
                    description: List of OAuth 2.0 scope values supported
                    items:
                      type: string
                    example:
                      - openid
                      - profile
                      - email
                  token_endpoint_auth_methods_supported:
                    type: array
                    description: >-
                      List of client authentication methods supported by the
                      token endpoint
                    items:
                      type: string
                      enum:
                        - client_secret_basic
                    example:
                      - client_secret_basic
                  claims_supported:
                    type: array
                    description: >-
                      List of claim names supported that can be returned in ID
                      Tokens
                    items:
                      type: string
                    example:
                      - sub
                      - iss
                      - name
                      - email
                      - email_verified
                  code_challenge_methods_supported:
                    type: array
                    description: List of PKCE code challenge methods supported
                    items:
                      type: string
                      enum:
                        - S256
                    example:
                      - S256
                  grant_types_supported:
                    type: array
                    description: List of OAuth 2.0 grant type values supported
                    items:
                      type: string
                      enum:
                        - authorization_code
                        - refresh_token
                        - client_credentials
                    example:
                      - authorization_code
                      - refresh_token
                      - client_credentials
                required:
                  - issuer
                  - authorization_endpoint
                  - token_endpoint
                  - userinfo_endpoint
                  - jwks_uri
                  - response_types_supported
                  - subject_types_supported
                  - id_token_signing_alg_values_supported
              example:
                issuer: https://auth.example.com
                authorization_endpoint: https://auth.example.com/authorize
                token_endpoint: https://auth.example.com/oauth/token
                userinfo_endpoint: https://auth.example.com/userinfo
                jwks_uri: https://auth.example.com/.well-known/jwks.json
                revocation_endpoint: https://auth.example.com/oauth/revoke
                introspection_endpoint: https://auth.example.com/oauth/introspect
                response_types_supported:
                  - code
                  - none
                subject_types_supported:
                  - public
                id_token_signing_alg_values_supported:
                  - RS256
                scopes_supported:
                  - openid
                  - profile
                  - email
                token_endpoint_auth_methods_supported:
                  - client_secret_basic
                claims_supported:
                  - sub
                  - iss
                  - name
                  - email
                  - email_verified
                code_challenge_methods_supported:
                  - S256
                grant_types_supported:
                  - authorization_code
                  - refresh_token
                  - client_credentials
        '500':
          description: Server error - Failed to retrieve OpenID configuration
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error code
                    example: server_error
                  error_description:
                    type: string
                    description: Detailed error message
                    example: Failed to retrieve OpenID configuration
                required:
                  - error
                  - error_description
  /logout:
    post:
      tags:
        - Authentication
      summary: Logout user and clear session
      description: >-
        Destroys the user session, clears all session cookies, and invalidates
        any active OAuth tokens
      responses:
        '200':
          description: Successfully logged out
          headers:
            Set-Cookie:
              schema:
                type: string
                example: >-
                  session=; Path=/; Expires=Thu, 01 Jan 1970 00:00:00 GMT;
                  HttpOnly; Secure; SameSite=Lax, oauth_session=; Path=/;
                  Expires=Thu, 01 Jan 1970 00:00:00 GMT; HttpOnly; Secure;
                  SameSite=Lax
              description: >-
                Clears all session and OAuth cookies by setting them to expired
                values
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    description: Indicates if the logout was successful
                  message:
                    type: string
                    description: A message confirming the logout
                required:
                  - success
              example:
                success: true
                message: Successfully logged out
        '401':
          description: Unauthorized - No active session to logout
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: unauthorized
                error_description: No active session found
        '500':
          description: Server error - Failed to clear session
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              example:
                error: server_error
                error_description: Failed to clear user session
