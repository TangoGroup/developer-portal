{
    "openapi": "3.1.0",
    "info": {
        "title": "AI API",
        "description": "Optimized for high-speed inference and scalability by Gloo AI\n\n[Swagger UI](./docs) | [ReDoc UI](./redoc)",
        "version": "1.0.0"
    },
    "servers": [
        {
            "url": "https://platform.ai.gloo.com"
        }
    ],
    "paths": {
        "/ai/{v}/chats": {
            "get": {
                "tags": [
                    "chat"
                ],
                "summary": "List of Chats",
                "description": "Chats with details by User\n\n→ Get List of Chats\n1. Provide Header `Authorization: <token>`",
                "operationId": "list",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {
                                        "type": "object"
                                    },
                                    "title": "Response List"
                                },
                                "example": [
                                    {
                                        "chat_id": "c108e5708-3a35-4104-8ac0-abd0fc18c008",
                                        "created_at": "2025-02-05T00:15:45.331447",
                                        "title": "Chat Title",
                                        "summary": "Chat Summary",
                                        "pin": false
                                    }
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find user"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/ai/{v}/chat": {
            "get": {
                "tags": [
                    "chat"
                ],
                "summary": "Full Chat Details",
                "description": "Chat History & Details\n\n→ Chats linked to a User\n1. Provide Header `Authorization: <token>`\n\n→ Chats with no User\n- Authorization token not required",
                "operationId": "get",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "chat_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Chat Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get"
                                },
                                "example": {
                                    "chat_id": "c108e5708-3a35-4104-8ac0-abd0fc18c008",
                                    "created_at": "2025-02-05T00:15:45.331447",
                                    "messages": [
                                        {
                                            "query_id": "q7f2d484a-acd8-48ca-9864-1aa6191a6ec0",
                                            "message_id": "m19e942a2-545b-41a1-9f1e-b96cd4f10d11",
                                            "timestamp": "2025-02-05T00:16:18.268667",
                                            "role": "user",
                                            "character_limit": 100,
                                            "message": "What is your name?"
                                        },
                                        {
                                            "query_id": "q7f2d484a-acd8-48ca-9864-1aa6191a6ec0",
                                            "message_id": "m62a91f80-f9f5-40ed-bd59-d7ce04b06de5",
                                            "timestamp": "2025-02-05T00:16:19.856265",
                                            "role": "kallm",
                                            "message": "My name is KALLM, and I'm here to assist you!"
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find chat"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "post": {
                "tags": [
                    "chat"
                ],
                "summary": "Create a Chat",
                "description": "Create a New Chat\n\n→ Link chat to User\n1. Provide Header `Authorization: <token>`\n\n→ Create chat with no User\n- Authorization token not required",
                "operationId": "post",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "chat_id": "c2e49a430-1d00-4f07-bd83-123c5b51c3b5",
                                    "created_at": "2025-02-05T00:12:52.322010"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to create chat"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "patch": {
                "tags": [
                    "chat"
                ],
                "summary": "Update a Chat Detail",
                "description": "Update Chat Details\n\ni.e. Title",
                "operationId": "patch",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "chat_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Chat ID"
                        }
                    },
                    {
                        "name": "chat_field",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/ChatFieldDropdown",
                            "minLength": 0,
                            "maxLength": 7,
                            "title": "Field to Update",
                            "description": "Select a field"
                        },
                        "description": "Select a field"
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ChatPatchRequest"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {},
                                "example": {
                                    "chat_id": "cd7c70b84-81b4-4865-ba38-5bce98d1919d",
                                    "field": "pin",
                                    "value": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid value"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "chat"
                ],
                "summary": "Delete Chat",
                "description": "Delete Chat.",
                "operationId": "delete",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "chat_id",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Chat Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Delete"
                                },
                                "example": {
                                    "deleted": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find chat"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/ai/{v}/message": {
            "post": {
                "tags": [
                    "chat"
                ],
                "summary": "Start → Chat with KALLM",
                "description": "Chat with KALLM\n\n→ `chat_id` is optional\n- A new chat will be created automatically.\n\n→ Link chat to User (optional)\n1. Provide Header `Authorization: <token>`\n\n→ Resume existing chat\n1. Provide Header `Authorization: <token>`\n2. Provide `chat_id`\n\nKALLM by default will perform a sentiment analysis on your prompt. It also will by default, provide suggestion follow ups, and will depending on your prompt return sources that have influenced the response from our trusted partners.\n\nYou can choose to override the defaults with the query params: `intent`, `enable_sources`, `enable_suggestions`.\n\nExample 1:  \nYou want a rich answer that is based on trusted sources and provides you follow up suggestions.  \nThis is the default behavior: omit all query params.\n\nExample 2:  \nYou know that your prompt is going to require trusted sources as a part of the answer. You also want to not have follow up suggestions.  \nintent: 1, enable_suggestions: 0\n\nExample 3:  \nYou know that your prompt is not going to require trusted sources. You also want to not have follow up suggestions.  \nintent: 0, enable_suggestions: 0",
                "operationId": "post-message",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "chat_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": "",
                            "title": "Chat Id"
                        }
                    },
                    {
                        "name": "intent",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/IntentEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Intent"
                        }
                    },
                    {
                        "name": "enable_sources",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/EnableSourcesEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": 1,
                            "title": "Enable Sources"
                        }
                    },
                    {
                        "name": "enable_suggestions",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/EnableSuggestionsEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": 1,
                            "title": "Enable Suggestions"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostMessageRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Post-Message"
                                },
                                "example": {
                                    "query_id": "q3c870f25-63fc-451f-a9ce-9a5abed55aa0",
                                    "message_id": "mbc51c1d8-29e7-416f-85fc-9f4209d9887b",
                                    "message": "My name is KALLM, and I'm here to assist you!",
                                    "timestamp": "2025-02-04T23:55:03.573767"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find chat"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "put": {
                "tags": [
                    "chat"
                ],
                "summary": "Stop Query",
                "description": "Control the Query Response\n\n1. Header `Authentication: <token>` required\n2. Select task\n3. Provided `chat_id` or `message_id`",
                "operationId": "put-message",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "task",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableTasks"
                        }
                    },
                    {
                        "name": "chat_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": "",
                            "title": "Chat Id"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": "",
                            "title": "Message Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Put-Message"
                                },
                                "example": {
                                    "task": "stop",
                                    "success": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find chat"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            },
            "delete": {
                "tags": [
                    "chat"
                ],
                "summary": "Delete a Message",
                "description": "Delete Message\n\nProvide Header `Authorization: <token>`\n\nProvide `message_id` or `query_id`",
                "operationId": "delete-message",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "message_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "",
                            "default": "",
                            "title": "Message Id"
                        }
                    },
                    {
                        "name": "query_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "description": "",
                            "default": "",
                            "title": "Query Id"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Delete-Message"
                                },
                                "example": {
                                    "deleted": true,
                                    "message_id": "m37e38f0b-0ef3-462d-bad7-4fd7e043b1c1"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find message"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/ai/{v}/message/kallm": {
            "post": {
                "tags": [
                    "chat"
                ],
                "summary": "Start → Chat with KALLM ✝",
                "description": "Chat with KALLM\n\n→ `chat_id` is optional\n- A new chat will be created automatically.\n\n→ Link chat to User (optional)\n1. Provide Header `Authorization: <token>`\n\n→ Resume existing chat\n1. Provide Header `Authorization: <token>`\n2. Provide `chat_id`\n\nKALLM by default will perform a sentiment analysis on your prompt. It also will by default, provide suggestion follow ups, and will depending on your prompt return sources that have influenced the response from our trusted partners.\n\nYou can choose to override the defaults with the query params: `intent`, `enable_sources`, `enable_suggestions`.\n\nExample 1:  \nYou want a rich answer that is based on trusted sources and provides you follow up suggestions.  \nThis is the default behavior: omit all query params.\n\nExample 2:  \nYou know that your prompt is going to require trusted sources as a part of the answer. You also want to not have follow up suggestions.  \nintent: 1, enable_suggestions: 0\n\nExample 3:  \nYou know that your prompt is not going to require trusted sources. You also want to not have follow up suggestions.  \nintent: 0, enable_suggestions: 0",
                "operationId": "post-message-kallm",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    },
                    {
                        "name": "chat_id",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": "",
                            "title": "Chat Id"
                        }
                    },
                    {
                        "name": "intent",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/IntentEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "title": "Intent"
                        }
                    },
                    {
                        "name": "enable_sources",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/EnableSourcesEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": 1,
                            "title": "Enable Sources"
                        }
                    },
                    {
                        "name": "enable_suggestions",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/EnableSuggestionsEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": 1,
                            "title": "Enable Suggestions"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostMessageRequestBody"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Post-Message-Kallm"
                                },
                                "example": {
                                    "query_id": "q3c870f25-63fc-451f-a9ce-9a5abed55aa0",
                                    "message_id": "mbc51c1d8-29e7-416f-85fc-9f4209d9887b",
                                    "message": "My name is KALLM, and I'm here to assist you!",
                                    "timestamp": "2025-02-04T23:55:03.573767"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find chat"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/ai/{v}/user": {
            "delete": {
                "tags": [
                    "chat"
                ],
                "summary": "Delete User",
                "description": "Delete User and their Chat History\n\n- Provide Header `Authorization: <token>`",
                "operationId": "delete-user",
                "parameters": [
                    {
                        "name": "v",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "$ref": "#/components/schemas/AvailableVersions"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Delete-User"
                                },
                                "example": {
                                    "deleted": true
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Failed to find user"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/ai/v1/chat/completions": {
            "post": {
                "tags": [
                    "studio"
                ],
                "summary": "Conversational Chat Completions",
                "description": "Conversational Chat Completions",
                "operationId": "post-completions",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/StudioPostCompletionsRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Non-streaming successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Post-Completions"
                                },
                                "example": {
                                    "id": "",
                                    "object": "chat.completion",
                                    "created": 1745341096,
                                    "model": "meta-llama/Llama-3.3-70B-Instruct",
                                    "choices": [
                                        {
                                            "index": 0,
                                            "message": {
                                                "role": "assistant",
                                                "content": "Here to provide respectful, polite, and compassionate responses to your questions and concerns, while upholding the importance of human life, dignity, and flourishing.",
                                                "annotations": []
                                            },
                                            "finish_reason": "done"
                                        }
                                    ],
                                    "service_tier": "default"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Model is required."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/models": {
            "get": {
                "tags": [
                    "studio"
                ],
                "summary": "List available models",
                "description": "Conversational Chat Completions",
                "operationId": "get-models",
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Get-Models"
                                },
                                "example": {
                                    "object": "list",
                                    "data": [
                                        {
                                            "id": "model-id-0",
                                            "object": "model",
                                            "created": 1686935002,
                                            "owned_by": "organization-owner"
                                        }
                                    ]
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/data/v1/search": {
            "post": {
                "tags": [
                    "data"
                ],
                "summary": "Search Publisher Data",
                "description": "Search Publisher Data",
                "operationId": "search",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostSuperSearchRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Search"
                                },
                                "example": {
                                    "data": {}
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/data/v1/sources": {
            "post": {
                "tags": [
                    "data"
                ],
                "summary": "Retrieve Sources",
                "description": "Retrieve Sources from a SuperCollection.",
                "operationId": "sources",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostSuperSearchRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {},
                                    "type": "array",
                                    "title": "Response Sources"
                                },
                                "example": {
                                    "data": {}
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/data/v1/collections": {
            "get": {
                "tags": [
                    "data"
                ],
                "summary": "List Available Collections",
                "description": "List Available Collections",
                "operationId": "collections",
                "parameters": [
                    {
                        "name": "multi_tenancy",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "anyOf": [
                                {
                                    "$ref": "#/components/schemas/BoolEnum"
                                },
                                {
                                    "type": "null"
                                }
                            ],
                            "default": false,
                            "title": "Multi Tenancy"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "array",
                                    "items": {},
                                    "title": "Response Collections"
                                },
                                "example": {
                                    "data": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/data/v1/publishers": {
            "post": {
                "tags": [
                    "data"
                ],
                "summary": "List Available Publishers",
                "description": "List Available Publishers",
                "operationId": "publishers",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostPublishersRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {},
                                    "type": "array",
                                    "title": "Response Publishers"
                                },
                                "example": {
                                    "data": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/data/v1/tenants": {
            "post": {
                "tags": [
                    "data"
                ],
                "summary": "List Available Tenants",
                "description": "List Available Tenants",
                "operationId": "tenants",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/PostTenantsRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "items": {},
                                    "type": "array",
                                    "title": "Response Tenants"
                                },
                                "example": {
                                    "data": []
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/paywall": {
            "post": {
                "tags": [
                    "core"
                ],
                "summary": "Paywall",
                "operationId": "paywall_ai_v1_kallm_paywall_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_paywall_ai_v1_kallm_paywall_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Paywall Ai V1 Kallm Paywall Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/search": {
            "post": {
                "tags": [
                    "core"
                ],
                "summary": "Search",
                "operationId": "search_ai_v1_kallm_search_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/SearchRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Search Ai V1 Kallm Search Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/intent": {
            "post": {
                "tags": [
                    "core"
                ],
                "summary": "Extract Intent from Query",
                "operationId": "intent",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/IntentRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Intent"
                                },
                                "example": {
                                    "intent": 1
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "error message"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity"
                    }
                }
            }
        },
        "/ai/v1/kallm/generate": {
            "post": {
                "tags": [
                    "core"
                ],
                "summary": "Generate",
                "description": "Generate a response from the LLM model.",
                "operationId": "generate_ai_v1_kallm_generate_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/KallmRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/generate/answers/stream": {
            "post": {
                "tags": [
                    "answers"
                ],
                "summary": "Generate Response Answer Stream",
                "description": "Generates a response answer based on a query and collections from the Search API.",
                "operationId": "generate_response_answer_stream_ai_v1_kallm_generate_answers_stream_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GenerateResponseAnswerStreamRequestBody"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successfully generated response answer",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "string",
                                    "title": "Response Generate Response Answer Stream Ai V1 Kallm Generate Answers Stream Post"
                                }
                            },
                            "text/plain": {
                                "example": [
                                    "This is response text."
                                ]
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid request or prompt"
                    },
                    "500": {
                        "description": "LLM inference error or server error"
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/paywall/related": {
            "post": {
                "tags": [
                    "content",
                    "content"
                ],
                "summary": "Paywall Related Endpoint",
                "description": "Retrieves 3 articles related to the provided producer_id along with article summary and key points.\nAlso fetches enrichment data from the data-engine service.",
                "operationId": "paywall_related_endpoint_ai_v1_kallm_paywall_related_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_paywall_related_endpoint_ai_v1_kallm_paywall_related_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/PaywallRelatedResponse"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/sotc/analysis": {
            "post": {
                "tags": [
                    "sotc"
                ],
                "summary": "Analysis",
                "description": "Generate AI insights by analyzing the uploaded CSV file asynchronously.\nResults will be sent to the provided webhook URL upon completion.",
                "operationId": "analysis_ai_v1_kallm_sotc_analysis_post",
                "parameters": [
                    {
                        "name": "webhook_url",
                        "in": "query",
                        "required": true,
                        "schema": {
                            "type": "string",
                            "title": "Webhook Url"
                        }
                    }
                ],
                "requestBody": {
                    "required": true,
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_analysis_ai_v1_kallm_sotc_analysis_post"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "202": {
                        "description": "Processing started in background",
                        "content": {
                            "application/json": {
                                "example": {
                                    "message": "Analysis started in background. Results will be sent to the webhook URL when complete."
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid file format. Please upload a CSV file.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid file format. Please upload a CSV file."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Internal server error"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/sotc/question-answers-analysis": {
            "post": {
                "tags": [
                    "sotc"
                ],
                "summary": "Question Answers Analysis",
                "description": "Generate AI insights by analyzing the questions and its answers.",
                "operationId": "question_answers_analysis_ai_v1_kallm_sotc_question_answers_analysis_post",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "items": {
                                    "$ref": "#/components/schemas/QuestionAnalysisRequestBody"
                                },
                                "type": "array",
                                "title": "Request Body"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "type": "object",
                                    "title": "Response Question Answers Analysis Ai V1 Kallm Sotc Question Answers Analysis Post"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Validation Error",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/HTTPValidationError"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ai/v1/kallm/sotc/church-metrics-ai-insights": {
            "post": {
                "tags": [
                    "sotc"
                ],
                "summary": "Analysis",
                "description": "Generate AI insights by analyzing the uploaded CSV files for national and organization church metrics.\n\nHow it works:\n- The endpoint accepts two CSV files: one for national church metrics and another for organization metrics (optional).\n- It reads and processes the CSV files, ensuring they are not empty and correctly formatted.\n- A pre-defined prompt template is fetched.\n- The CSV file data is injected into the prompt template to construct a full prompt.\n- The prompt, along with parameters such as temperature and model configuration, is sent to the LLM for generating insights.\n- The LLM response is parsed into a JSON containing insights which is then returned.",
                "operationId": "analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post",
                "requestBody": {
                    "content": {
                        "multipart/form-data": {
                            "schema": {
                                "$ref": "#/components/schemas/Body_analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post"
                            }
                        }
                    },
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Successful Response",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ChurchMetricsInsightsResponseBody"
                                }
                            }
                        }
                    },
                    "422": {
                        "description": "Invalid file format. Please upload a CSV file.",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Invalid file format. Please upload a CSV file."
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "content": {
                            "application/json": {
                                "example": {
                                    "detail": "Internal server error"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "AvailableTasks": {
                "type": "string",
                "enum": [
                    "stop"
                ],
                "title": "AvailableTasks"
            },
            "AvailableVersions": {
                "type": "string",
                "enum": [
                    "v1"
                ],
                "title": "AvailableVersions"
            },
            "Body_analysis_ai_v1_kallm_sotc_analysis_post": {
                "properties": {
                    "csvFile": {
                        "type": "string",
                        "format": "binary",
                        "title": "CSV file containing data to analyze",
                        "description": "The first line of the CSV file should contain the header, and the second line should contain the national average. The rest of the file should contain the data to analyze."
                    }
                },
                "type": "object",
                "required": [
                    "csvFile"
                ],
                "title": "Body_analysis_ai_v1_kallm_sotc_analysis_post"
            },
            "Body_analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post": {
                "properties": {
                    "nationalCsvFile": {
                        "type": "string",
                        "format": "binary",
                        "title": "CSV file containing the national church metrics data",
                        "description": "Upload a CSV file containing the national church metrics data."
                    },
                    "orgCsvFile": {
                        "type": "string",
                        "format": "binary",
                        "title": "CSV file containing the organization church metrics data",
                        "description": "Upload a CSV file containing the organization church metrics data (optional)."
                    }
                },
                "type": "object",
                "required": [
                    "nationalCsvFile"
                ],
                "title": "Body_analysis_ai_v1_kallm_sotc_church_metrics_ai_insights_post"
            },
            "Body_paywall_ai_v1_kallm_paywall_post": {
                "properties": {
                    "paywall": {
                        "$ref": "#/components/schemas/PaywallBody"
                    },
                    "request_body": {
                        "$ref": "#/components/schemas/SearchFilters"
                    }
                },
                "type": "object",
                "required": [
                    "paywall",
                    "request_body"
                ],
                "title": "Body_paywall_ai_v1_kallm_paywall_post"
            },
            "Body_paywall_related_endpoint_ai_v1_kallm_paywall_related_post": {
                "properties": {
                    "request": {
                        "$ref": "#/components/schemas/GetRelatedArticlesRequest"
                    },
                    "request_body": {
                        "$ref": "#/components/schemas/SearchFilters"
                    }
                },
                "type": "object",
                "required": [
                    "request",
                    "request_body"
                ],
                "title": "Body_paywall_related_endpoint_ai_v1_kallm_paywall_related_post"
            },
            "BoolEnum": {
                "type": "string",
                "enum": [
                    "true",
                    "false"
                ],
                "title": "BoolEnum"
            },
            "ChatFieldDropdown": {
                "type": "string",
                "enum": [
                    "pin",
                    "title",
                    "summary"
                ],
                "title": "ChatFieldDropdown"
            },
            "ChatPatchRequest": {
                "properties": {
                    "new_value": {
                        "title": "New Value",
                        "description": "The new value for the field.",
                        "default": ""
                    }
                },
                "type": "object",
                "title": "ChatPatchRequest"
            },
            "ChurchMetricsInsightsResponseBody": {
                "properties": {
                    "data": {
                        "items": {
                            "$ref": "#/components/schemas/Insight"
                        },
                        "type": "array",
                        "title": "Data",
                        "description": "Response data containing insights"
                    }
                },
                "type": "object",
                "required": [
                    "data"
                ],
                "title": "ChurchMetricsInsightsResponseBody"
            },
            "EnableSourcesEnum": {
                "type": "integer",
                "enum": [
                    0,
                    1,
                    2
                ],
                "title": "EnableSourcesEnum"
            },
            "EnableSuggestionsEnum": {
                "type": "integer",
                "enum": [
                    0,
                    1
                ],
                "title": "EnableSuggestionsEnum"
            },
            "GenerateResponseAnswerStreamRequestBody": {
                "properties": {
                    "compiledPrompt": {
                        "type": "string",
                        "title": "Compiledprompt",
                        "description": "Prompt to generate a response"
                    },
                    "forceGenerate": {
                        "type": "boolean",
                        "title": "Forcegenerate",
                        "description": "Force generation of a new response",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "compiledPrompt"
                ],
                "title": "GenerateResponseAnswerStreamRequestBody"
            },
            "GetRelatedArticlesRequest": {
                "properties": {
                    "producer_id": {
                        "type": "string",
                        "title": "Producer Id",
                        "description": "Producer ID of the article"
                    }
                },
                "type": "object",
                "required": [
                    "producer_id"
                ],
                "title": "GetRelatedArticlesRequest"
            },
            "HTTPValidationError": {
                "properties": {
                    "detail": {
                        "items": {
                            "$ref": "#/components/schemas/ValidationError"
                        },
                        "type": "array",
                        "title": "Detail"
                    }
                },
                "type": "object",
                "title": "HTTPValidationError"
            },
            "Insight": {
                "properties": {
                    "title": {
                        "type": "string",
                        "title": "Title",
                        "description": "Title of the insight"
                    },
                    "text": {
                        "type": "string",
                        "title": "Text",
                        "description": "Text content of the insight"
                    },
                    "categories": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Categories",
                        "description": "Categories this insight relates to"
                    }
                },
                "type": "object",
                "required": [
                    "title",
                    "text",
                    "categories"
                ],
                "title": "Insight"
            },
            "IntentEnum": {
                "type": "integer",
                "enum": [
                    0,
                    1
                ],
                "title": "IntentEnum"
            },
            "IntentRequestBody": {
                "properties": {
                    "query": {
                        "type": "string",
                        "title": "Query"
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "IntentRequestBody"
            },
            "KallmRequestBody": {
                "properties": {
                    "prompt": {
                        "type": "string",
                        "title": "Prompt",
                        "description": "Prompt to generate a response"
                    }
                },
                "type": "object",
                "required": [
                    "prompt"
                ],
                "title": "KallmRequestBody"
            },
            "LlmMessage": {
                "properties": {
                    "role": {
                        "type": "string",
                        "title": "Role",
                        "description": "Role of the message sender",
                        "default": "user"
                    },
                    "content": {
                        "type": "string",
                        "title": "Content",
                        "description": "Content of the message",
                        "default": "Hello!"
                    }
                },
                "type": "object",
                "title": "LlmMessage"
            },
            "PaywallBody": {
                "properties": {
                    "title": {
                        "type": "string",
                        "maxLength": 100,
                        "minLength": 1,
                        "title": "Title",
                        "description": "Title of the article"
                    }
                },
                "type": "object",
                "required": [
                    "title"
                ],
                "title": "PaywallBody"
            },
            "PaywallRelatedResponse": {
                "properties": {
                    "ai_paywall_summary": {
                        "type": "string",
                        "title": "Ai Paywall Summary",
                        "description": "Summary of the article"
                    },
                    "ai_why_read": {
                        "type": "string",
                        "title": "Ai Why Read",
                        "description": "Why this article is worth reading"
                    },
                    "bullet_points": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Bullet Points",
                        "description": "Key points from the article"
                    },
                    "related_articles": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Related Articles",
                        "description": "Related articles"
                    }
                },
                "type": "object",
                "required": [
                    "ai_paywall_summary",
                    "ai_why_read",
                    "bullet_points",
                    "related_articles"
                ],
                "title": "PaywallRelatedResponse"
            },
            "PostMessageRequestBody": {
                "properties": {
                    "chat_id": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Chat Id",
                        "description": "chat_id can also be provided as a query param",
                        "default": ""
                    },
                    "query": {
                        "type": "string",
                        "title": "Query",
                        "description": "Chat with KALLM.",
                        "default": "What is your name?"
                    },
                    "character_limit": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Character Limit",
                        "description": "Limit the response length."
                    },
                    "sources_limit": {
                        "anyOf": [
                            {
                                "type": "integer"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Sources Limit",
                        "description": "Limit the sources search.",
                        "default": 10
                    },
                    "stream": {
                        "anyOf": [
                            {
                                "type": "boolean"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Stream",
                        "description": "Stream response as soon as tokens are generated by the model.",
                        "default": false
                    },
                    "publishers": {
                        "anyOf": [
                            {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Publishers",
                        "description": "List of Publisher Names",
                        "default": []
                    }
                },
                "type": "object",
                "title": "PostMessageRequestBody"
            },
            "PostPublishersRequestBody": {
                "properties": {
                    "collection": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Collection",
                        "description": "Class/Collection to Search",
                        "default": "ChatSuperCollection"
                    }
                },
                "type": "object",
                "title": "PostPublishersRequestBody"
            },
            "PostSuperSearchRequestBody": {
                "properties": {
                    "query": {
                        "type": "string",
                        "minLength": 1,
                        "title": "Query",
                        "description": "User Query"
                    },
                    "collection": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Collection",
                        "description": "SuperCollection to Search",
                        "default": "ChatSuperCollection"
                    },
                    "publishers": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Publishers",
                        "description": "List of Publisher Names",
                        "default": []
                    },
                    "limit": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Limit",
                        "description": "Limit the sources search.",
                        "default": 10
                    }
                },
                "type": "object",
                "required": [
                    "query"
                ],
                "title": "PostSuperSearchRequestBody"
            },
            "PostTenantsRequestBody": {
                "properties": {
                    "collection": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Collection",
                        "description": "Class/Collection to Search",
                        "default": "ChatSuperCollection"
                    }
                },
                "type": "object",
                "title": "PostTenantsRequestBody"
            },
            "QuestionAnalysisRequestBody": {
                "properties": {
                    "question": {
                        "type": "string",
                        "title": "Question",
                        "description": "Question to analyze"
                    },
                    "questionId": {
                        "type": "integer",
                        "title": "Questionid",
                        "description": "Question ID"
                    },
                    "answers": {
                        "items": {
                            "type": "object"
                        },
                        "type": "array",
                        "title": "Answers",
                        "description": "List of answers with their details as json objects"
                    }
                },
                "type": "object",
                "required": [
                    "question",
                    "questionId",
                    "answers"
                ],
                "title": "QuestionAnalysisRequestBody"
            },
            "SearchFilters": {
                "properties": {
                    "collection": {
                        "type": "string",
                        "title": "Collection"
                    },
                    "tenant": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tenant"
                    }
                },
                "type": "object",
                "required": [
                    "collection"
                ],
                "title": "SearchFilters"
            },
            "SearchRequestBody": {
                "properties": {
                    "search": {
                        "type": "string",
                        "minLength": 1,
                        "title": "Search",
                        "description": "Search query"
                    },
                    "collection": {
                        "type": "string",
                        "title": "Collection",
                        "description": "Collection to search in"
                    },
                    "filters": {
                        "items": {
                            "type": "string"
                        },
                        "type": "array",
                        "title": "Filters",
                        "description": "List of publishers to filter by",
                        "default": []
                    },
                    "limit": {
                        "type": "integer",
                        "minimum": 1.0,
                        "title": "Limit",
                        "description": "Number of search results to return",
                        "default": 100
                    },
                    "tenant": {
                        "anyOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "null"
                            }
                        ],
                        "title": "Tenant",
                        "description": "Tenant to search in"
                    }
                },
                "type": "object",
                "required": [
                    "search",
                    "collection"
                ],
                "title": "SearchRequestBody"
            },
            "StudioPostCompletionsRequestBody": {
                "properties": {
                    "model": {
                        "type": "string",
                        "title": "Model",
                        "description": "Model to use for generating responses",
                        "default": "meta-llama/Llama-3.3-70B-Instruct"
                    },
                    "messages": {
                        "items": {
                            "$ref": "#/components/schemas/LlmMessage"
                        },
                        "type": "array",
                        "title": "Messages",
                        "description": "Messages to send to the LLM"
                    },
                    "max_tokens": {
                        "type": "integer",
                        "minimum": 1024.0,
                        "title": "Max Tokens",
                        "description": "Max tokens to use for generating responses",
                        "default": 1024
                    },
                    "stream": {
                        "type": "boolean",
                        "title": "Stream",
                        "description": "Stream response as soon as tokens are generated by the model.",
                        "default": false
                    },
                    "temperature": {
                        "type": "number",
                        "maximum": 1.0,
                        "minimum": 0.0,
                        "title": "Temperature",
                        "description": "Temperature to use for generating responses",
                        "default": 0.7
                    },
                    "tools": {
                        "items": {
                            "$ref": "#/components/schemas/Tool"
                        },
                        "type": "array",
                        "title": "Tools",
                        "description": "List of tools you want the LLM to leverage.",
                        "default": []
                    },
                    "tool_choice": {
                        "anyOf": [
                            {
                                "type": "string",
                                "enum": [
                                    "none",
                                    "auto",
                                    "required"
                                ]
                            },
                            {
                                "$ref": "#/components/schemas/ToolChoiceFunctionOption"
                            }
                        ],
                        "title": "Tool Choice",
                        "description": "Which tool your LLM should use among the list.",
                        "default": "none"
                    }
                },
                "additionalProperties": true,
                "type": "object",
                "required": [
                    "messages"
                ],
                "title": "StudioPostCompletionsRequestBody"
            },
            "Tool": {
                "properties": {
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "This field must be the literal string function.",
                        "default": "function"
                    },
                    "function": {
                        "$ref": "#/components/schemas/ToolFunction",
                        "description": "Function attributes."
                    }
                },
                "type": "object",
                "required": [
                    "function"
                ],
                "title": "Tool"
            },
            "ToolChoiceFunction": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "The name of the chosen function to invoke."
                    }
                },
                "type": "object",
                "required": [
                    "name"
                ],
                "title": "ToolChoiceFunction"
            },
            "ToolChoiceFunctionOption": {
                "properties": {
                    "function": {
                        "$ref": "#/components/schemas/ToolChoiceFunction",
                        "description": "The encapsulation of the chosen function to invoke."
                    },
                    "type": {
                        "type": "string",
                        "title": "Type",
                        "description": "This field must be the literal string function.",
                        "default": "function"
                    }
                },
                "type": "object",
                "required": [
                    "function"
                ],
                "title": "ToolChoiceFunctionOption"
            },
            "ToolFunction": {
                "properties": {
                    "name": {
                        "type": "string",
                        "title": "Name",
                        "description": "Name of the function."
                    },
                    "description": {
                        "type": "string",
                        "title": "Description",
                        "description": "Description of the function."
                    },
                    "parameters": {
                        "type": "object",
                        "title": "Parameters",
                        "description": "Parameters to call the function.",
                        "default": []
                    },
                    "strict": {
                        "type": "boolean",
                        "title": "Strict",
                        "description": "Whether to adhere strictly to the parameters definition.",
                        "default": false
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "description"
                ],
                "title": "ToolFunction"
            },
            "ValidationError": {
                "properties": {
                    "loc": {
                        "items": {
                            "anyOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "type": "array",
                        "title": "Location"
                    },
                    "msg": {
                        "type": "string",
                        "title": "Message"
                    },
                    "type": {
                        "type": "string",
                        "title": "Error Type"
                    }
                },
                "type": "object",
                "required": [
                    "loc",
                    "msg",
                    "type"
                ],
                "title": "ValidationError"
            }
        },
        "securitySchemes": {
            "bearerAuth": {
                "type": "http",
                "scheme": "bearer",
                "description": "Bearer authentication header of the form Bearer `<token>`, where `<token>` is your [auth token](/studio/manage-api-credentials)."
            }
        }
    },
    "security": [
        {
            "bearerAuth": []
        }
    ]
}
